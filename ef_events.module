<?php
/**
 * @file
 * Code for the EF Events feature.
 */

include_once 'ef_events.features.inc';

/**
 * Implements hook_migrate_api().
 */
function ef_events_migrate_api() {
  $api = array(
    'api' => 2,
    'migrations' => array(
      'EFPaidEventProduct' => array('class_name' => 'EFPaidEventProduct'),
      'EFPaidEventNode' => array('class_name' => 'EFPaidEventNode'),
      'EFDonationProduct' => array('class_name' => 'EFDonationProduct'),
    ),
  );

  return $api;
}

/**
 * Implements hook_node_info().
 */
function ef_events_node_info() {
  $items = array(
    'event_payable' => array(
      'name' => t('Paid Event'),
      'base' => 'node_content',
      'description' => t('Post information about planned activities or meetings, which can be purchased.'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => '',
    ),
  );
  return $items;
}

/**
 * Implementation of hook_form_FORMID_alter().
 */
function ef_events_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state) {
  global $user;
  $line_item = $form_state['line_item'];
  $product = commerce_product_load($line_item->commerce_product[LANGUAGE_NONE][0]['product_id']);

  if ($product->type == 'registration') {
    if (!user_is_logged_in()) {
      unset($form['line_item_fields']);
      unset($form['product_id']);
      $form['message']['#markup'] = t('Please !link to register.', array('!link' => l(t('login'), 'user/login', array('query' => array('destination' => request_path())))));
      $form['submit']['#disabled'] = TRUE;
      $form['submit']['#value'] = t('Login to register');
    }
    elseif (!_ef_users_profile_filled_in()) {
      unset($form['line_item_fields']);
      $form['message']['#markup'] = t('Please fill in your !link before your registration.', array('!link' => l(t('profile'), 'user/' .$user->uid . '/edit-profile', array('query' => array('destination' => current_path())))));
      $form['submit']['#disabled'] = TRUE;
      $form['submit']['#value'] = t('Fill in your profile account before registration');
    }
    elseif (!og_get_groups_by_user(NULL, 'node')) {
      $form['message']['#markup'] = t('Please !link before your registration', array('!link' => l(t('join a group'), 'groups', array('query' => array('destination' => current_path())))));
      $form['submit']['#disabled'] = TRUE;
      $form['submit']['#value'] = t('Join a group before your registration.');
    }
    elseif ($existing_order_id = _ef_user_has_bought_products(array($product->product_id))) {
      // Product has already been purchased!
      // We only want users to register for a program once
      unset($form['line_item_fields']);
      $form['submit']['#disabled'] = TRUE;
      $form['submit']['#value'] = t('Already attending');

      // Since they have bought a registration, link to it.
      $order_path = 'user/' . $user->uid . '/orders/' . $existing_order_id;
      $form['#suffix'] = l(t('View my registration'), $order_path);
    }
    // Change the "Add to Cart" button text
    elseif ($form['submit']['#disabled'] != TRUE) {
      $form['submit']['#value'] = t('Attend');
      $form['submit']['#attributes']['class'][] = 'action-item-primary';
    }

  }
}

/**
 * Only allow one registration product in the cart with the quantity of one.
 *
 * Implements hook_commerce_cart_product_add().
 */
function ef_events_commerce_cart_product_add($order, $product, $quantity, $line_item) {
  if ($product->type == 'registration') {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Loop through the line items.
    foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
      // If this is the product we're keeping, make sure the quantity is 1.
      if ($line_item_wrapper->commerce_product->product_id->value() == $product->product_id) {
        $line_item_wrapper->quantity->set(1);
        $line_item_wrapper->save();
      }
      else {
        // Remove any other product from the order.
        commerce_cart_order_product_line_item_delete($order, $line_item_wrapper->line_item_id->value());
      }
    }
  }
}

/**
 * Has the user bought a product.
 */
function _ef_user_has_bought_products($product_ids = array()) {
  global $user;

  $result =& drupal_static(__FUNCTION__, array());

  if (empty($result)) {
    $query = db_select('field_data_commerce_product', 'p');
    $query->fields('o', array('uid', 'order_id'));
    $query->innerJoin('field_data_commerce_line_items', 'l', 'l.commerce_line_items_line_item_id = p.entity_id');
    $query->innerJoin('commerce_order', 'o', 'o.order_id = l.entity_id');
    $query->condition('p.commerce_product_product_id', $product_ids, 'IN');
    $query->condition('o.status', array('pending', 'processing', 'completed', 'invoiced'), 'IN');
    $query->groupBy('o.order_id');
    $result = $query->execute()->fetchAllAssoc('uid');
  }

  // User has ordered product previously.
  if (array_key_exists($user->uid, $result)) {
    return $result[$user->uid]->order_id;
  }

  return FALSE;
}


/**
 * Implements hook_block_info().
 */
function ef_events_block_info() {
  $blocks['ef_events_create_event_link'] = array(
    'info' => t('"Create a payable event" call to action'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ef_events_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'ef_events_create_event_link':
      if (node_access('create', 'event-payable')) {
        $block['subject'] = NULL;
        $block['content'] = array(
          '#type' => 'link',
          '#title' => t('List a payable event'),
          '#href' => 'node/add/event-payable',
          '#options' => array(
            'query' => array(
              'destination' => 'events',
            ),
          ),
        );
      }
      break;
  }

  return $block;
}
