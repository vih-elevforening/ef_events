<?php
/**
 * @file
 * Code for the EF Events feature.
 */

include_once 'ef_events.features.inc';

/**
 * Implements hook_migrate_api().
 */
function ef_events_migrate_api() {
  $api = array(
    'api' => 2,
    'migrations' => array(
      'EFPaidEventProduct' => array('class_name' => 'EFPaidEventProduct'),
      'EFPaidEventNode' => array('class_name' => 'EFPaidEventNode'),
      'EFDonationProduct' => array('class_name' => 'EFDonationProduct'),
    ),
  );

  return $api;
}

/**
 * Implements hook_node_info().
 */
function ef_events_node_info() {
  $items = array(
    'event_payable' => array(
      'name' => t('Paid Event'),
      'base' => 'node_content',
      'description' => t('Post information about planned activities or meetings, which can be purchased.'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => '',
    ),
  );
  return $items;
}

/**
 * Implementation of hook_form_FORMID_alter().
 */
function ef_events_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state) {
  $line_item = $form_state['line_item'];
  $product = commerce_product_load($line_item->commerce_product[LANGUAGE_NONE][0]['product_id']);

  if ($product->type == 'registration') {
    // Change the "Add to Cart" button text
    if ($form['submit']['#disabled'] != TRUE) {
      $form['submit']['#value'] = t('Attend');
      $form['submit']['#attributes']['class'][] = 'action-item-primary';
    }

    if (_ef_user_has_bought_products(array($product->product_id))) {
      // Product has already been purchased!
      // We only want users to register for a program once
      $form['submit']['#disabled'] = TRUE;
      $form['submit']['#value'] = t('Already attending');
    }
  }
}

/**
 * Only allow one registration product in the cart with the quantity of one.
 *
 * Implements hook_commerce_cart_product_add().
 */
function ef_events_commerce_cart_product_add($order, $product, $quantity, $line_item) {
  if ($product->type == 'registration') {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Loop through the line items.
    foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
      // If this is the product we're keeping, make sure the quantity is always 1.
      if ($line_item_wrapper->commerce_product->product_id->value() == $product->product_id) {
        $line_item_wrapper->quantity->set(1);
        $line_item_wrapper->save();
      }
      else {
        // Remove any other product from the order
        commerce_cart_order_product_line_item_delete($order, $line_item_wrapper->line_item_id->value());
      }
    }
  }
}

/**
 * Has the user bought a product.
 */
function _ef_user_has_bought_products($product_ids = array()) {
  global $user;

  $query = db_select('field_data_commerce_product', 'p');
  $query->fields('o', array('uid'));
  $query->innerJoin('field_data_commerce_line_items', 'l', 'l.commerce_line_items_line_item_id = p.entity_id');
  $query->innerJoin('commerce_order', 'o', 'o.order_id = l.entity_id');
  $query->condition('p.commerce_product_product_id', $product_ids, 'IN');
  $query->groupBy('o.order_id');
  $result = $query->execute()->fetchCol();

  // User has ordered product previously.
  if (in_array($user->uid, $result)){
    return TRUE;
  }

  return FALSE;
}
